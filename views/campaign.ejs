<form data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>" method="POST" action="/campaigns/pledge">
    <ul>
        <li>Campaigner: <%= campaign.events.CreatedCampaign.returnValues.campaigner %></li>
        <li>Campaign Index: <%= campaign.events.CreatedCampaign.returnValues.campaignIndex %></li>
        <li>Amount: $<%= Number(campaign.events.CreatedCampaign.returnValues.targetAmountUSD)/100 %></li>
        <li>Amount (Wei): <%= campaign.events.CreatedCampaign.returnValues.targetAmount %></li>
        <li>Deadline: <%= new Date(Number(campaign.events.CreatedCampaign.returnValues.deadline)) %></li>
        <li>Number of Pledgers: <%= campaign.struct.numberOfPledgers %> / <%= campaign.struct.minimumNumberOfPledgers %></li>
        <li>Max Pledge Amount: $<%= (Number(campaign.events.CreatedCampaign.returnValues.targetAmountUSD)/100) / campaign.struct.minimumNumberOfPledgers %></li>
        <li>Current Pledge Amount: $<%= (Number(campaign.events.CreatedCampaign.returnValues.targetAmountUSD)/100) / ((Number(campaign.struct.numberOfPledgers) >= Number(campaign.struct.minimumNumberOfPledgers))? campaign.struct.numberOfPledgers : campaign.struct.minimumNumberOfPledgers) %></li>
    </ul>
    
    <input hidden name="campaignIndex" value="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>" >

    <% if(typeof _user !== "undefined") { %>
        <% if(_user.etherAddress == campaign.struct.campaigner) { %>
            <% if(Date.now() >= Number(campaign.events.CreatedCampaign.returnValues.deadline) && Number(campaign.struct.numberOfPledgers) >= Number(campaign.struct.minimumNumberOfPledgers) && !campaign.struct.hasClaimed) { %>
                <button class="claimFunds">Claim Funds</button>
                <script>
                    {
                        const form = document.querySelector(`form[data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>"]`);
                        const button = form.querySelector(`button.claimFunds`);
                        
                        button.addEventListener("click", event => {
                            event.preventDefault();

                            pennySeedContract.claimFunds(<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>, (error, transactionHash) => {
                                if(error == null) {
                                    window.location.reload();
                                }
                                else {
                                    console.error(error);
                                }
                            });
                        });
                    }
                </script>
            <% } %>
        <% } else { %>
            <% if(Date.now() < Number(campaign.events.CreatedCampaign.returnValues.deadline)) { %>
                <% if(campaign.events.PledgedToCampaign == undefined && !_user.pledges.includes(Number(campaign.events.CreatedCampaign.returnValues.campaignIndex))) { %>
                    <% if(_user.customerId !== undefined) { %>
                        <button class="pledgeWithStripe">Pledge using Stripe</button>
                        <script>
                            {
                                const form = document.querySelector(`form[data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>"]`);
                                const button = form.querySelector(`button.pledgeWithStripe`);
                            }
                        </script>
                    <% } %>

                    <% if(_user.etherAddress !== undefined) { %>
                            <button class="pledgeWithMetamask" disabled>Pledge with MetaMask</button>

                            <script>
                                {
                                    const form = document.querySelector(`form[data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>"]`);
                                    const button = form.querySelector(`button.pledgeWithMetamask`);
                                    
                                    if(web3 !== undefined) {
                                        ethereum.enable()
                                            .then(accounts => {
                                                const accountIndex = accounts.findIndex(account => account == <%= _user.etherAddress %>);
                                                if(accountIndex >= 0) {
                                                    button.disabled = false;
                                                    button.addEventListener("click", event => {
                                                        event.preventDefault();
                                                        pennySeedContract.pledgeToCampaign.sendTransaction(<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>, {from: accounts[accountIndex], value : <%= Math.floor(campaign.struct.targetAmount/campaign.struct.minimumNumberOfPledgers) %>}, (error, transactionHash) => {
                                                            if(error == null) {
                                                                window.location.reload();
                                                            }
                                                            else
                                                                console.error(error);
                                                        });
                                                    });
                                                }
                                            });
                                    }
                                }
                            </script>
                    <% } %>
                <% } %>
            <% } else { %>
                <% if(campaign.events.PledgedToCampaign !== undefined) { %>
                    <% if(campaign.struct.numberOfPledgers >= campaign.struct.minimumNumberOfPledgers) { %>
                        <% if(campaign.events.RedeemedRebate == undefined) { %>
                            <button class="redeemRebate" >Redeem Rebate</button>
                            <script>
                                {
                                    const form = document.querySelector(`form[data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>"]`);
                                    const button = form.querySelector(`button.redeemRebate`);

                                    button.addEventListener("click", event => {
                                        event.preventDefault();

                                        pennySeedContract.redeemRebate(<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>, (error, transactionHash) => {
                                            if(error == null) {
                                                window.location.reload();
                                            }
                                            else {
                                                console.error(error);
                                            }
                                        });
                                    });
                                }
                            </script>
                        <% } %>
                    <% } else { %>
                        <% if(campaign.events.RedeemedRefund == undefined) { %>
                            <button class="redeemRefund">Redeem Refund</button>
                            <script>
                                {
                                    const form = document.querySelector(`form[data-campaign-index="<%= campaign.events.CreatedCampaign.returnValues.campaignIndex %>"]`);
                                    const button = form.querySelector(`button.redeemRefund`);

                                    button.addEventListener("click", event => {
                                        event.preventDefault();

                                        pennySeedContract.redeemRebate(campaignIndex, (error, transactionHash) => {
                                            if(error == null) {
                                                window.location.reload();
                                            }
                                            else {
                                                console.error(error);
                                            }
                                        });
                                    });
                                }
                            </script>
                        <% } %>
                    <% } %>
                <% } %>
            <% } %>
        <% } %>
    <% } %>
</form>